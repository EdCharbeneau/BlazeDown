@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.Components;
@using System.Timers;

<textarea ref="@editor" onkeyup="@InputChanged" value="@InitialValue" type="text" />

@functions {
ElementRef editor;
Timer debounceTimer = new Timer()
{
    Interval = 1000,
    AutoReset = false,
};

[Parameter] protected string InitialValue { get; set; }

[Parameter] Action<UIChangeEventArgs> OnChange { get; set; }

string GetElementValue(ElementRef elementRef) => ((IJSInProcessRuntime)JSRuntime.Current).Invoke<string>("BlazeDown.getValueByElement", elementRef);

void InputChanged(UIKeyboardEventArgs args)
{
    if (!debounceTimer.Enabled)
    {
        debounceTimer.Elapsed += (s, a) =>
        {
            OnChange?.Invoke(new UIChangeEventArgs { Type = "change", Value = GetElementValue(editor) });
            StateHasChanged();
        };
        debounceTimer.Start();
    }
    else
    {
        debounceTimer.Stop();
        debounceTimer.Start();
    }
}
}